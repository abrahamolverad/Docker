# render.yaml
# Blueprint for deploying the multi-service Rok-AI application

envVarGroups:
  - name: common-db-config
    envVars:
      - key: MONGODB_URI
        value: "YOUR_MONGODB_ATLAS_CONNECTION_STRING_HERE" # IMPORTANT: Replace with your actual MongoDB Atlas URI
  - name: alpaca-api-keys # For existing Alpaca-based stock bots
    envVars:
      - key: ALPACA_API_KEY
        value: "YOUR_ALPACA_API_KEY_FOR_DAYTRADE_HERE"
      - key: ALPACA_SECRET_KEY
        value: "YOUR_ALPACA_SECRET_KEY_FOR_DAYTRADE_HERE"
      - key: ALPACA_SCALPINGSNIPER_KEY
        value: "YOUR_ALPACA_SCALPINGSNIPER_KEY_HERE"
      - key: ALPACA_SCALPINGSNIPER_SECRET_KEY
        value: "YOUR_ALPACA_SCALPINGSNIPER_SECRET_KEY_HERE"
      - key: ALPACA_UNHOLY_KEY
        value: "YOUR_ALPACA_UNHOLY_KEY_HERE"
      - key: ALPACA_UNHOLY_SECRET_KEY
        value: "YOUR_ALPACA_UNHOLY_SECRET_KEY_HERE"
  - name: binance-api-keys # NEW: For Binance keys for the crypto script
    envVars:
      - key: BINANCE_API_KEY
        value: "YOUR_BINANCE_SPOT_OR_GENERAL_API_KEY"
      - key: BINANCE_SECRET_KEY
        value: "YOUR_BINANCE_SPOT_OR_GENERAL_SECRET_KEY"
      - key: BINANCE_FUTURES_API_KEY
        value: "YOUR_BINANCE_FUTURES_API_KEY_HERE_IF_DIFFERENT"
      - key: BINANCE_FUTURES_SECRET_KEY
        value: "YOUR_BINANCE_FUTURES_SECRET_KEY_HERE_IF_DIFFERENT"
  - name: other-api-keys
    envVars:
      - key: OPENAI_API_KEY
        value: "YOUR_OPENAI_API_KEY_HERE"
      - key: FINNHUB_API_KEY
        value: "YOUR_FINNHUB_API_KEY_HERE"
      - key: Slcaper_Stock_TELEGRAM_BOT_TOKEN # Typo from alpaca_swing.py, should be Scalper_Stock_...
        value: "YOUR_SCALPER_TELEGRAM_BOT_TOKEN_HERE"
      - key: TELEGRAM_CHAT_ID
        value: "YOUR_TELEGRAM_CHAT_ID_HERE"
      - key: Unholy_TELEGRAM_BOT_TOKEN
        value: "YOUR_UNHOLY_TELEGRAM_BOT_TOKEN_HERE"
      - key: TELEGRAM_USER_ID
        value: "YOUR_UNHOLY_TELEGRAM_USER_ID_HERE"
      # NEW Telegram ENVs for Crypto_Genie_V6.3
      - key: Crypto_TELEGRAM_BOT_TOKEN
        value: "YOUR_CRYPTO_GENIE_TELEGRAM_BOT_TOKEN"
      - key: CRYPTO_TELEGRAM_USER_ID
        value: "YOUR_CRYPTO_GENIE_PRIMARY_TELEGRAM_USER_ID"
      - key: CRYPTO_AUTHORIZED_TELEGRAM_USER_IDS
        value: "YOUR_CRYPTO_GENIE_AUTHORIZED_IDS_COMMA_SEP"

  - name: market-data-keys
    envVars:
      - key: POLYGON_API_KEY
        value: "YOUR_POLYGON_API_KEY_HERE"
      - key: BENZINGA_API_KEY
        value: "YOUR_BENZINGA_API_KEY_HERE"

services:
  - name: webapi
    type: web
    env: docker
    region: frankfurt
    plan: standard
    dockerfilePath: ./web_api/Dockerfile
    healthCheckPath: /health
    envVars:
      - fromGroup: common-db-config
    autoDeploy: yes

  - name: scanners
    type: worker
    env: docker
    region: frankfurt
    plan: standard
    dockerfilePath: ./scanners/Dockerfile
    envVars:
      - fromGroup: common-db-config
      - fromGroup: alpaca-api-keys
      - fromGroup: other-api-keys
    autoDeploy: yes

  - name: router
    type: worker
    env: docker
    region: frankfurt
    plan: standard
    dockerfilePath: ./meta_ai/Dockerfile
    envVars:
      - fromGroup: common-db-config
      - fromGroup: other-api-keys
      - key: USE_OPENAI
        value: "false"
    autoDeploy: yes

  - name: executor-day
    type: worker
    env: docker
    region: frankfurt
    plan: standard
    dockerfilePath: ./executors/Dockerfile
    envVars:
      - fromGroup: common-db-config
      - fromGroup: alpaca-api-keys
      - fromGroup: other-api-keys
      - key: ROLE
        value: "daytrade"
      - key: EXECUTOR_SCRIPT
        value: "alpaca_day.py"
    autoDeploy: yes

  - name: executor-swing
    type: worker
    env: docker
    region: frankfurt
    plan: standard
    dockerfilePath: ./executors/Dockerfile
    envVars:
      - fromGroup: common-db-config
      - fromGroup: alpaca-api-keys
      - fromGroup: other-api-keys
      - key: ROLE
        value: "swing"
      - key: EXECUTOR_SCRIPT
        value: "alpaca_swing.py"
    autoDeploy: yes

  - name: executor-options
    type: worker
    env: docker
    region: frankfurt
    plan: standard
    dockerfilePath: ./executors/Dockerfile
    envVars:
      - fromGroup: common-db-config
      - fromGroup: alpaca-api-keys
      - fromGroup: other-api-keys
      - key: ROLE
        value: "options"
      - key: EXECUTOR_SCRIPT
        value: "alpaca_options.py"
    autoDeploy: yes

  - name: executor-crypto # NEW CRYPTO SERVICE
    type: worker
    env: docker
    region: frankfurt
    plan: standard
    dockerfilePath: ./executors/Dockerfile
    envVars:
      - fromGroup: common-db-config
      - fromGroup: binance-api-keys
      - fromGroup: other-api-keys
      - key: ROLE
        value: "crypto"
      - key: EXECUTOR_SCRIPT
        value: "crypto_genie.py"
    autoDeploy: yes

  - name: swing-gpt
    type: worker
    env: docker
    region: frankfurt
    plan: standard
    dockerfilePath: ./swing_gpt/Dockerfile
    envVars:
      - fromGroup: market-data-keys
      - fromGroup: other-api-keys
      - key: OPENAI_MODEL
        value: "gpt-5-nano"
      - key: ALPACA_KEY_ID
        value: "YOUR_ALPACA_KEY_ID"
      - key: ALPACA_SECRET_KEY
        value: "YOUR_ALPACA_SECRET_KEY"
      - key: ALPACA_PAPER_BASE
        value: "https://paper-api.alpaca.markets"
      - key: TELEGRAM_BOT_TOKEN
        value: "YOUR_TELEGRAM_BOT_TOKEN_HERE"
      - key: ACCOUNT_EQUITY
        value: "25000"
    autoDeploy: yes
