# render.yaml
# Blueprint for deploying the multi-service Rok-AI application

# Define Environment Groups for shared secrets and configurations
# Replace placeholder values with your actual secrets in the Render Dashboard.
envVarGroups:
  - name: common-db-config
    envVars:
      - key: MONGODB_URI
        value: "YOUR_MONGODB_ATLAS_CONNECTION_STRING_HERE" # IMPORTANT: Replace with your actual MongoDB Atlas URI
  - name: alpaca-api-keys
    envVars:
      - key: ALPACA_API_KEY # Used by executor-day (and daytrade_genie.py)
        value: "YOUR_ALPACA_API_KEY_FOR_DAYTRADE_HERE"
      - key: ALPACA_SECRET_KEY # Used by executor-day (and daytrade_genie.py)
        value: "YOUR_ALPACA_SECRET_KEY_FOR_DAYTRADE_HERE"
      - key: ALPACA_SCALPINGSNIPER_KEY # Used by executor-swing
        value: "YOUR_ALPACA_SCALPINGSNIPER_KEY_HERE"
      - key: ALPACA_SCALPINGSNIPER_SECRET_KEY # Used by executor-swing
        value: "YOUR_ALPACA_SCALPINGSNIPER_SECRET_KEY_HERE"
      - key: ALPACA_UNHOLY_KEY # Used by executor-options
        value: "YOUR_ALPACA_UNHOLY_KEY_HERE"
      - key: ALPACA_UNHOLY_SECRET_KEY # Used by executor-options
        value: "YOUR_ALPACA_UNHOLY_SECRET_KEY_HERE"
  - name: other-api-keys
    envVars:
      - key: OPENAI_API_KEY # Used by router
        value: "YOUR_OPENAI_API_KEY_HERE"
      - key: FINNHUB_API_KEY # Used by scanners (daytrade_genie.py) and executor-day (alpaca_day.py)
        value: "YOUR_FINNHUB_API_KEY_HERE"
      - key: Slcaper_Stock_TELEGRAM_BOT_TOKEN # Typo from alpaca_swing.py, should be Scalper_Stock_...
        value: "YOUR_SCALPER_TELEGRAM_BOT_TOKEN_HERE" # Check original file for correct name
      - key: TELEGRAM_CHAT_ID # Used by alpaca_swing.py
        value: "YOUR_TELEGRAM_CHAT_ID_HERE"
      - key: Unholy_TELEGRAM_BOT_TOKEN # Used by alpaca_options.py
        value: "YOUR_UNHOLY_TELEGRAM_BOT_TOKEN_HERE"
      - key: TELEGRAM_USER_ID # Used by alpaca_options.py
        value: "YOUR_UNHOLY_TELEGRAM_USER_ID_HERE"

services:
  - name: webapi # Your FastAPI backend
    type: web
    env: docker # Specifies that Render should build from a Dockerfile
    repo: https://github.com/abrahamolverad/Docker-2ffa73d8060aa54be0519a0e9aaf48cda81b6641.git # Optional: Explicitly specify repo if needed, usually inferred
    region: frankfurt # Or your preferred region, e.g., ohio, oregon, singapore
    plan: standard # Or your preferred plan (free plan has limitations)
    dockerfilePath: ./web_api/Dockerfile
    # The CMD in your web_api/Dockerfile should be: CMD ["uvicorn", "app:app", "--host", "0.0.0.0", "--port", "8000"]
    # Render automatically detects the port from the Dockerfile's EXPOSE or the running process.
    healthCheckPath: /health # From your web_api/app.py
    envVars:
      - fromGroup: common-db-config
    autoDeploy: yes # Optional: set to 'no' for manual deploys

  - name: scanners # Your scanners service
    type: worker # Background worker, not publicly accessible via HTTP
    env: docker
    region: frankfurt
    plan: standard
    dockerfilePath: ./scanners/Dockerfile # This Dockerfile should CMD ["python", "daytrade_genie.py"]
    envVars:
      - fromGroup: common-db-config
      - fromGroup: alpaca-api-keys # Assuming daytrade_genie needs the primary Alpaca keys
      - fromGroup: other-api-keys # For FINNHUB_API_KEY
    autoDeploy: yes

  - name: router # Your meta_ai service
    type: worker
    env: docker
    region: frankfurt
    plan: standard
    dockerfilePath: ./meta_ai/Dockerfile # This Dockerfile should CMD ["python", "strategy_router.py"]
    envVars:
      - fromGroup: common-db-config
      - fromGroup: other-api-keys # For OPENAI_API_KEY
      - key: USE_OPENAI # As per your docker-compose.yml
        value: "false" # Set to "true" if you want to use OpenAI and have the key
    autoDeploy: yes

# ... (previous parts of render.yaml are the same) ...

  - name: executor-day
    type: worker
    env: docker
    region: frankfurt
    plan: standard
    dockerfilePath: ./executors/Dockerfile # Shared Dockerfile for executors
    # startCommand: "python -u alpaca_day.py" # REMOVE THIS LINE
    envVars:
      - fromGroup: common-db-config
      - fromGroup: alpaca-api-keys
      - fromGroup: other-api-keys # For FINNHUB_API_KEY
      - key: ROLE
        value: "daytrade"
      - key: EXECUTOR_SCRIPT # Add this
        value: "alpaca_day.py"
    autoDeploy: yes

  - name: executor-swing
    type: worker
    env: docker
    region: frankfurt
    plan: standard
    dockerfilePath: ./executors/Dockerfile # Shared Dockerfile for executors
    # startCommand: "python -u alpaca_swing.py" # REMOVE THIS LINE
    envVars:
      - fromGroup: common-db-config
      - fromGroup: alpaca-api-keys
      - fromGroup: other-api-keys # For Telegram keys
      - key: ROLE
        value: "swing"
      - key: EXECUTOR_SCRIPT # Add this
        value: "alpaca_swing.py"
    autoDeploy: yes

  - name: executor-options
    type: worker
    env: docker
    region: frankfurt
    plan: standard
    dockerfilePath: ./executors/Dockerfile # Shared Dockerfile for executors
    # startCommand: "python -u alpaca_options.py" # REMOVE THIS LINE
    envVars:
      - fromGroup: common-db-config
      - fromGroup: alpaca-api-keys
      - fromGroup: other-api-keys # For Telegram keys
      - key: ROLE
        value: "options"
      - key: EXECUTOR_SCRIPT # Add this
        value: "alpaca_options.py"
    autoDeploy: yes